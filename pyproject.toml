[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "loppers"
version = "0.1.0"
description = "Extract source file skeletons using tree-sitter queries"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "manolo.santos@gmail.com" }]
keywords = [
  "tree-sitter",
  "code-skeleton",
  "extraction",
  "parsing",
  "ast",
  "loppers",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Code Generators",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = ["tree-sitter>=0.25.0", "tree-sitter-language-pack>=0.10.0"]

[project.optional-dependencies]
dev = ["pytest>=7.0.0", "pytest-cov>=4.0.0", "ruff>=0.1.0"]

[project.urls]
Homepage = "https://github.com/yourusername/loppers"
Documentation = "https://github.com/yourusername/loppers#readme"
Repository = "https://github.com/yourusername/loppers"
Issues = "https://github.com/yourusername/loppers/issues"

[tool.uv]
dev-dependencies = ["pytest>=7.0.0", "pytest-cov>=4.0.0", "ruff>=0.1.0"]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/loppers"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers --tb=short"
markers = [
  "slow: marks tests as slow",
  "integration: marks tests as integration tests",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
  "ARG", # flake8-unused-arguments
  "SIM", # flake8-simplify
  "RUF", # ruff-specific rules
  "D",   # pydocstyle
]
ignore = [
  "E203", # whitespace before ':'
  "D104", # missing docstring in public package
  "D100", # missing docstring in public module
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["loppers"]
